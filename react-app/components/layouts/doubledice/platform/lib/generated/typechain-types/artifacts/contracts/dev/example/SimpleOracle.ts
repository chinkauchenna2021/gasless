/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export type EncodedVirtualFloorMetadataStruct = {
  version: BytesLike;
  data: BytesLike;
};

export type EncodedVirtualFloorMetadataStructOutput = [string, string] & {
  version: string;
  data: string;
};

export type VirtualFloorCreationParamsStruct = {
  vfId: BigNumberish;
  betaOpen_e18: BigNumberish;
  totalFeeRate_e18: BigNumberish;
  tOpen: BigNumberish;
  tClose: BigNumberish;
  tResolve: BigNumberish;
  nOutcomes: BigNumberish;
  paymentToken: string;
  bonusAmount: BigNumberish;
  optionalMinCommitmentAmount: BigNumberish;
  optionalMaxCommitmentAmount: BigNumberish;
  metadata: EncodedVirtualFloorMetadataStruct;
  creator: string;
};

export type VirtualFloorCreationParamsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  number,
  number,
  number,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  EncodedVirtualFloorMetadataStructOutput,
  string
] & {
  vfId: BigNumber;
  betaOpen_e18: BigNumber;
  totalFeeRate_e18: BigNumber;
  tOpen: number;
  tClose: number;
  tResolve: number;
  nOutcomes: number;
  paymentToken: string;
  bonusAmount: BigNumber;
  optionalMinCommitmentAmount: BigNumber;
  optionalMaxCommitmentAmount: BigNumber;
  metadata: EncodedVirtualFloorMetadataStructOutput;
  creator: string;
};

export interface SimpleOracleInterface extends utils.Interface {
  functions: {
    "PROTOCOL()": FunctionFragment;
    "betaOf(uint256,uint8,uint256)": FunctionFragment;
    "commitToVirtualFloor(uint256,uint8[],uint256[],uint256)": FunctionFragment;
    "createVirtualFloor((uint256,uint256,uint256,uint32,uint32,uint32,uint8,address,uint256,uint256,uint256,(bytes32,bytes),address))": FunctionFragment;
    "onVirtualFloorConclusion(uint256)": FunctionFragment;
    "resolve(uint256,uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PROTOCOL"
      | "betaOf"
      | "commitToVirtualFloor"
      | "createVirtualFloor"
      | "onVirtualFloorConclusion"
      | "resolve"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "PROTOCOL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "betaOf",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitToVirtualFloor",
    values: [BigNumberish, BigNumberish[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createVirtualFloor",
    values: [VirtualFloorCreationParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "onVirtualFloorConclusion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolve",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "PROTOCOL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "betaOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitToVirtualFloor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVirtualFloor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onVirtualFloorConclusion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;

  events: {};
}

export interface SimpleOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SimpleOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PROTOCOL(overrides?: CallOverrides): Promise<[string]>;

    betaOf(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    commitToVirtualFloor(
      vfId: BigNumberish,
      outcomeIndexes: BigNumberish[],
      amounts: BigNumberish[],
      optionalDeadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createVirtualFloor(
      params: VirtualFloorCreationParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onVirtualFloorConclusion(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    resolve(
      vfId: BigNumberish,
      winningOutcomeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  PROTOCOL(overrides?: CallOverrides): Promise<string>;

  betaOf(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  commitToVirtualFloor(
    vfId: BigNumberish,
    outcomeIndexes: BigNumberish[],
    amounts: BigNumberish[],
    optionalDeadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createVirtualFloor(
    params: VirtualFloorCreationParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onVirtualFloorConclusion(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  resolve(
    vfId: BigNumberish,
    winningOutcomeIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PROTOCOL(overrides?: CallOverrides): Promise<string>;

    betaOf(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    commitToVirtualFloor(
      vfId: BigNumberish,
      outcomeIndexes: BigNumberish[],
      amounts: BigNumberish[],
      optionalDeadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createVirtualFloor(
      params: VirtualFloorCreationParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    onVirtualFloorConclusion(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    resolve(
      vfId: BigNumberish,
      winningOutcomeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    PROTOCOL(overrides?: CallOverrides): Promise<BigNumber>;

    betaOf(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commitToVirtualFloor(
      vfId: BigNumberish,
      outcomeIndexes: BigNumberish[],
      amounts: BigNumberish[],
      optionalDeadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createVirtualFloor(
      params: VirtualFloorCreationParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onVirtualFloorConclusion(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolve(
      vfId: BigNumberish,
      winningOutcomeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PROTOCOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    betaOf(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    commitToVirtualFloor(
      vfId: BigNumberish,
      outcomeIndexes: BigNumberish[],
      amounts: BigNumberish[],
      optionalDeadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createVirtualFloor(
      params: VirtualFloorCreationParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onVirtualFloorConclusion(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolve(
      vfId: BigNumberish,
      winningOutcomeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
