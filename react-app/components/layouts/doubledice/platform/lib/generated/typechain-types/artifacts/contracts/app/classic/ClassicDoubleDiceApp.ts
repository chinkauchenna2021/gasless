/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export type EncodedVirtualFloorMetadataStruct = {
  version: BytesLike;
  data: BytesLike;
};

export type EncodedVirtualFloorMetadataStructOutput = [string, string] & {
  version: string;
  data: string;
};

export type VirtualFloorCreationParamsStruct = {
  vfId: BigNumberish;
  betaOpen_e18: BigNumberish;
  totalFeeRate_e18: BigNumberish;
  tOpen: BigNumberish;
  tClose: BigNumberish;
  tResolve: BigNumberish;
  nOutcomes: BigNumberish;
  paymentToken: string;
  bonusAmount: BigNumberish;
  optionalMinCommitmentAmount: BigNumberish;
  optionalMaxCommitmentAmount: BigNumberish;
  metadata: EncodedVirtualFloorMetadataStruct;
  creator: string;
};

export type VirtualFloorCreationParamsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  number,
  number,
  number,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  EncodedVirtualFloorMetadataStructOutput,
  string
] & {
  vfId: BigNumber;
  betaOpen_e18: BigNumber;
  totalFeeRate_e18: BigNumber;
  tOpen: number;
  tClose: number;
  tResolve: number;
  nOutcomes: number;
  paymentToken: string;
  bonusAmount: BigNumber;
  optionalMinCommitmentAmount: BigNumber;
  optionalMaxCommitmentAmount: BigNumber;
  metadata: EncodedVirtualFloorMetadataStructOutput;
  creator: string;
};

export type ResolutionStruct = {
  state: BigNumberish;
  setOutcomeIndex: BigNumberish;
  tResultChallengeMax: BigNumberish;
  challengeOutcomeIndex: BigNumberish;
  challenger: string;
};

export type ResolutionStructOutput = [
  number,
  number,
  number,
  number,
  string
] & {
  state: number;
  setOutcomeIndex: number;
  tResultChallengeMax: number;
  challengeOutcomeIndex: number;
  challenger: string;
};

export declare namespace CreationQuotas {
  export type QuotaAdjustmentStruct = {
    creator: string;
    relativeAmount: BigNumberish;
  };

  export type QuotaAdjustmentStructOutput = [string, BigNumber] & {
    creator: string;
    relativeAmount: BigNumber;
  };
}

export interface ClassicDoubleDiceAppInterface extends utils.Interface {
  functions: {
    "CHALLENGE_BOND_USD_AMOUNT()": FunctionFragment;
    "CHALLENGE_WINDOW_DURATION()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "OPERATOR_ROLE()": FunctionFragment;
    "PROTOCOL()": FunctionFragment;
    "SET_WINDOW_DURATION()": FunctionFragment;
    "_resolutions(uint256)": FunctionFragment;
    "adjustCreationQuotas((address,int256)[])": FunctionFragment;
    "betaOf(uint256,uint8,uint256)": FunctionFragment;
    "bondAmount()": FunctionFragment;
    "bondUsdErc20Token()": FunctionFragment;
    "challengeSetResult(uint256,uint8)": FunctionFragment;
    "commitToVirtualFloor(uint256,uint8[],uint256[],uint256)": FunctionFragment;
    "confirmUnchallengedResult(uint256)": FunctionFragment;
    "createVirtualFloor((uint256,uint256,uint256,uint32,uint32,uint32,uint8,address,uint256,uint256,uint256,(bytes32,bytes),address))": FunctionFragment;
    "creationQuotas(address)": FunctionFragment;
    "finalizeChallenge(uint256,uint8)": FunctionFragment;
    "finalizeUnsetResult(uint256,uint8)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "onVirtualFloorConclusion(uint256)": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "resolutions(uint256)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setResult(uint256,uint8)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CHALLENGE_BOND_USD_AMOUNT"
      | "CHALLENGE_WINDOW_DURATION"
      | "DEFAULT_ADMIN_ROLE"
      | "OPERATOR_ROLE"
      | "PROTOCOL"
      | "SET_WINDOW_DURATION"
      | "_resolutions"
      | "adjustCreationQuotas"
      | "betaOf"
      | "bondAmount"
      | "bondUsdErc20Token"
      | "challengeSetResult"
      | "commitToVirtualFloor"
      | "confirmUnchallengedResult"
      | "createVirtualFloor"
      | "creationQuotas"
      | "finalizeChallenge"
      | "finalizeUnsetResult"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "onVirtualFloorConclusion"
      | "paused"
      | "renounceRole"
      | "resolutions"
      | "revokeRole"
      | "setResult"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CHALLENGE_BOND_USD_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CHALLENGE_WINDOW_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PROTOCOL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SET_WINDOW_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_resolutions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adjustCreationQuotas",
    values: [CreationQuotas.QuotaAdjustmentStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "betaOf",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bondAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bondUsdErc20Token",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "challengeSetResult",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitToVirtualFloor",
    values: [BigNumberish, BigNumberish[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmUnchallengedResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createVirtualFloor",
    values: [VirtualFloorCreationParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "creationQuotas",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeChallenge",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeUnsetResult",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onVirtualFloorConclusion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "resolutions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setResult",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "CHALLENGE_BOND_USD_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CHALLENGE_WINDOW_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PROTOCOL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SET_WINDOW_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_resolutions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustCreationQuotas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "betaOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bondAmount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bondUsdErc20Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengeSetResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitToVirtualFloor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmUnchallengedResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVirtualFloor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creationQuotas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeUnsetResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onVirtualFloorConclusion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolutions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setResult", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "CreationQuotaAdjustments(tuple[])": EventFragment;
    "Paused(address)": EventFragment;
    "ResultUpdate(uint256,address,uint8,uint8)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "VirtualFloorCreation(uint256,uint256,uint32,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreationQuotaAdjustments"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResultUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VirtualFloorCreation"): EventFragment;
}

export interface CreationQuotaAdjustmentsEventObject {
  adjustments: CreationQuotas.QuotaAdjustmentStructOutput[];
}
export type CreationQuotaAdjustmentsEvent = TypedEvent<
  [CreationQuotas.QuotaAdjustmentStructOutput[]],
  CreationQuotaAdjustmentsEventObject
>;

export type CreationQuotaAdjustmentsEventFilter =
  TypedEventFilter<CreationQuotaAdjustmentsEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface ResultUpdateEventObject {
  vfId: BigNumber;
  operator: string;
  action: number;
  outcomeIndex: number;
}
export type ResultUpdateEvent = TypedEvent<
  [BigNumber, string, number, number],
  ResultUpdateEventObject
>;

export type ResultUpdateEventFilter = TypedEventFilter<ResultUpdateEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface VirtualFloorCreationEventObject {
  vfId: BigNumber;
  betaOpen_e18: BigNumber;
  tOpen: number;
  metadata: EncodedVirtualFloorMetadataStructOutput;
}
export type VirtualFloorCreationEvent = TypedEvent<
  [BigNumber, BigNumber, number, EncodedVirtualFloorMetadataStructOutput],
  VirtualFloorCreationEventObject
>;

export type VirtualFloorCreationEventFilter =
  TypedEventFilter<VirtualFloorCreationEvent>;

export interface ClassicDoubleDiceApp extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ClassicDoubleDiceAppInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CHALLENGE_BOND_USD_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    CHALLENGE_WINDOW_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PROTOCOL(overrides?: CallOverrides): Promise<[string]>;

    SET_WINDOW_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    _resolutions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string] & {
        state: number;
        setOutcomeIndex: number;
        tResultChallengeMax: number;
        challengeOutcomeIndex: number;
        challenger: string;
      }
    >;

    adjustCreationQuotas(
      adjustments: CreationQuotas.QuotaAdjustmentStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    betaOf(
      vfId: BigNumberish,
      arg1: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    bondAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    bondUsdErc20Token(overrides?: CallOverrides): Promise<[string]>;

    challengeSetResult(
      vfId: BigNumberish,
      challengeOutcomeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commitToVirtualFloor(
      vfId: BigNumberish,
      outcomeIndexes: BigNumberish[],
      amounts: BigNumberish[],
      optionalDeadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    confirmUnchallengedResult(
      vfId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createVirtualFloor(
      params: VirtualFloorCreationParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creationQuotas(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    finalizeChallenge(
      vfId: BigNumberish,
      finalOutcomeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalizeUnsetResult(
      vfId: BigNumberish,
      finalOutcomeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onVirtualFloorConclusion(
      vfId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resolutions(
      vfId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [ResolutionStructOutput] & { resolution: ResolutionStructOutput }
    >;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setResult(
      vfId: BigNumberish,
      setOutcomeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  CHALLENGE_BOND_USD_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  CHALLENGE_WINDOW_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  PROTOCOL(overrides?: CallOverrides): Promise<string>;

  SET_WINDOW_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  _resolutions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, string] & {
      state: number;
      setOutcomeIndex: number;
      tResultChallengeMax: number;
      challengeOutcomeIndex: number;
      challenger: string;
    }
  >;

  adjustCreationQuotas(
    adjustments: CreationQuotas.QuotaAdjustmentStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  betaOf(
    vfId: BigNumberish,
    arg1: BigNumberish,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  bondAmount(overrides?: CallOverrides): Promise<BigNumber>;

  bondUsdErc20Token(overrides?: CallOverrides): Promise<string>;

  challengeSetResult(
    vfId: BigNumberish,
    challengeOutcomeIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commitToVirtualFloor(
    vfId: BigNumberish,
    outcomeIndexes: BigNumberish[],
    amounts: BigNumberish[],
    optionalDeadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  confirmUnchallengedResult(
    vfId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createVirtualFloor(
    params: VirtualFloorCreationParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creationQuotas(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  finalizeChallenge(
    vfId: BigNumberish,
    finalOutcomeIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalizeUnsetResult(
    vfId: BigNumberish,
    finalOutcomeIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onVirtualFloorConclusion(
    vfId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resolutions(
    vfId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ResolutionStructOutput>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setResult(
    vfId: BigNumberish,
    setOutcomeIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    CHALLENGE_BOND_USD_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    CHALLENGE_WINDOW_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    PROTOCOL(overrides?: CallOverrides): Promise<string>;

    SET_WINDOW_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    _resolutions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string] & {
        state: number;
        setOutcomeIndex: number;
        tResultChallengeMax: number;
        challengeOutcomeIndex: number;
        challenger: string;
      }
    >;

    adjustCreationQuotas(
      adjustments: CreationQuotas.QuotaAdjustmentStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    betaOf(
      vfId: BigNumberish,
      arg1: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    bondAmount(overrides?: CallOverrides): Promise<BigNumber>;

    bondUsdErc20Token(overrides?: CallOverrides): Promise<string>;

    challengeSetResult(
      vfId: BigNumberish,
      challengeOutcomeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    commitToVirtualFloor(
      vfId: BigNumberish,
      outcomeIndexes: BigNumberish[],
      amounts: BigNumberish[],
      optionalDeadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    confirmUnchallengedResult(
      vfId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createVirtualFloor(
      params: VirtualFloorCreationParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    creationQuotas(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    finalizeChallenge(
      vfId: BigNumberish,
      finalOutcomeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeUnsetResult(
      vfId: BigNumberish,
      finalOutcomeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(overrides?: CallOverrides): Promise<void>;

    onVirtualFloorConclusion(
      vfId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    resolutions(
      vfId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ResolutionStructOutput>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setResult(
      vfId: BigNumberish,
      setOutcomeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "CreationQuotaAdjustments(tuple[])"(
      adjustments?: null
    ): CreationQuotaAdjustmentsEventFilter;
    CreationQuotaAdjustments(
      adjustments?: null
    ): CreationQuotaAdjustmentsEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "ResultUpdate(uint256,address,uint8,uint8)"(
      vfId?: BigNumberish | null,
      operator?: null,
      action?: null,
      outcomeIndex?: null
    ): ResultUpdateEventFilter;
    ResultUpdate(
      vfId?: BigNumberish | null,
      operator?: null,
      action?: null,
      outcomeIndex?: null
    ): ResultUpdateEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "VirtualFloorCreation(uint256,uint256,uint32,tuple)"(
      vfId?: BigNumberish | null,
      betaOpen_e18?: null,
      tOpen?: null,
      metadata?: null
    ): VirtualFloorCreationEventFilter;
    VirtualFloorCreation(
      vfId?: BigNumberish | null,
      betaOpen_e18?: null,
      tOpen?: null,
      metadata?: null
    ): VirtualFloorCreationEventFilter;
  };

  estimateGas: {
    CHALLENGE_BOND_USD_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    CHALLENGE_WINDOW_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PROTOCOL(overrides?: CallOverrides): Promise<BigNumber>;

    SET_WINDOW_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    _resolutions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    adjustCreationQuotas(
      adjustments: CreationQuotas.QuotaAdjustmentStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    betaOf(
      vfId: BigNumberish,
      arg1: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondAmount(overrides?: CallOverrides): Promise<BigNumber>;

    bondUsdErc20Token(overrides?: CallOverrides): Promise<BigNumber>;

    challengeSetResult(
      vfId: BigNumberish,
      challengeOutcomeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commitToVirtualFloor(
      vfId: BigNumberish,
      outcomeIndexes: BigNumberish[],
      amounts: BigNumberish[],
      optionalDeadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    confirmUnchallengedResult(
      vfId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createVirtualFloor(
      params: VirtualFloorCreationParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creationQuotas(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    finalizeChallenge(
      vfId: BigNumberish,
      finalOutcomeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalizeUnsetResult(
      vfId: BigNumberish,
      finalOutcomeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onVirtualFloorConclusion(
      vfId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resolutions(
      vfId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setResult(
      vfId: BigNumberish,
      setOutcomeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CHALLENGE_BOND_USD_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CHALLENGE_WINDOW_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROTOCOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SET_WINDOW_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _resolutions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adjustCreationQuotas(
      adjustments: CreationQuotas.QuotaAdjustmentStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    betaOf(
      vfId: BigNumberish,
      arg1: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bondUsdErc20Token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    challengeSetResult(
      vfId: BigNumberish,
      challengeOutcomeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commitToVirtualFloor(
      vfId: BigNumberish,
      outcomeIndexes: BigNumberish[],
      amounts: BigNumberish[],
      optionalDeadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    confirmUnchallengedResult(
      vfId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createVirtualFloor(
      params: VirtualFloorCreationParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creationQuotas(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalizeChallenge(
      vfId: BigNumberish,
      finalOutcomeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalizeUnsetResult(
      vfId: BigNumberish,
      finalOutcomeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onVirtualFloorConclusion(
      vfId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resolutions(
      vfId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setResult(
      vfId: BigNumberish,
      setOutcomeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
